name: FastAPI Docker Deploy to NCP


on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # GitHub 레포지토리 코드 가져오기

      - name: Create .env File
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "GITHUB_TOKEN=${{ secrets.ENV_GITHUB_TOKEN }}" >> .env
          echo "GITHUB_USERNAME=${{ secrets.ENV_GITHUB_USERNAME }}" >> .env
          echo "AI_SERVICE_URL=${{ secrets.AI_SERVICE_URL }}" >> .env
          echo "GITHUB_USERNAME=${{ secrets.FRONTEND_URL }}" >> .env
          echo "GITHUB_USERNAME=${{ secrets.AI_LANGCHAIN_URL }}" >> .env

      - name: Configure Docker Daemon (Allow HTTP Registry)
        run: |
          echo '{ "insecure-registries": ["${{ secrets.JARVIS_DOMAIN }}:5000"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Login to Private Registry
        run: |
          echo "${{ secrets.NCP_REGISTRY_PASSWORD }}" | docker login ${{ secrets.JARVIS_DOMAIN }}:5000 \
            -u ${{ secrets.NCP_REGISTRY_USER }} --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.JARVIS_DOMAIN }}:5000/test-app .

      - name: Push Docker Image to Private Registry
        run: |
          docker push ${{ secrets.JARVIS_DOMAIN }}:5000/test-app

      - name: Deploy to NCP Server (Password Authentication)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_DEV_SERVER_IP }}
          username: root
          password: ${{ secrets.NCP_DEV_SSH_PASSWORD }}
          script: |
            echo '{ "insecure-registries": ["${{ secrets.JARVIS_DOMAIN }}:5000"] }' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            echo "${{ secrets.NCP_REGISTRY_PASSWORD }}" | docker login ${{ secrets.JARVIS_DOMAIN }}:5000 \
              -u ${{ secrets.NCP_REGISTRY_USER }} --password-stdin
            docker pull ${{ secrets.JARVIS_DOMAIN }}:5000/test-app
            docker stop test-app || true
            docker rm test-app || true
            docker run -d --name test-app --restart=always -p 8000:8000 \
              ${{ secrets.JARVIS_DOMAIN }}:5000/test-app